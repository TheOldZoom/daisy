generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id               String           @id
  fmUser           String?
  selfprefix       String?
  blacklistedSince DateTime?
  timezone         String?
  birthday         String?
  messages         userMessages[]
  globalLevel      globalUserLevel?
  guildLevels      guildUserLevel[]
  guildMember      guildMember[]
  guildLevel       guildLevel[]
}

model userMessages {
  id            Int      @id @default(autoincrement())
  guildId       String
  userId        String
  total         Int      @default(0)
  wordCount     Int      @default(0)
  lastMessageAt DateTime @updatedAt

  user user @relation(fields: [userId], references: [id])
}

model globalUserLevel {
  id          Int      @id @default(autoincrement())
  userId      String   @unique
  level       Int      @default(0)
  xp          Int      @default(0)
  lastLevelUp DateTime
  rank        Int?
  bonusXP     Int      @default(0)

  user user @relation(fields: [userId], references: [id])
}

model guildUserLevel {
  id          Int      @id @default(autoincrement())
  userId      String
  guildId     String
  level       Int      @default(0)
  xp          Int      @default(0)
  lastLevelUp DateTime
  rank        Int?
  bonusXP     Int      @default(0)

  user  user  @relation(fields: [userId], references: [id])
  guild guild @relation(fields: [guildId], references: [id])

  @@unique([userId, guildId])
}

model guild {
  id               String    @id
  name             String?
  prefix           String?
  blacklistedSince DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  lastSeenAt       DateTime?

  icon     String?
  ownerId  String?
  settings guildSettings?
  levels   guildLevel[]
  members  guildMember[]

  levelingEnabled Boolean @default(true)
  welcomeEnabled  Boolean @default(false)
  automodEnabled  Boolean @default(false)

  systemChannelId  String?
  welcomeChannelId String?
  logsChannelId    String?
  guildUserLevel   guildUserLevel[]

  @@index([ownerId])
}

model guildMember {
  id         Int       @id @default(autoincrement())
  guildId    String
  userId     String
  nick       String
  joinedAt   DateTime  @default(now())
  isMuted    Boolean   @default(false)
  mutedUntil DateTime?

  guild guild             @relation(fields: [guildId], references: [id])
  user  user              @relation(fields: [userId], references: [id])
  roles guildMemberRole[]

  @@unique([userId, guildId])
}

model guildMemberRole {
  id            Int         @id @default(autoincrement())
  roleId        String
  guildMember   guildMember @relation(fields: [guildMemberId], references: [id])
  guildMemberId Int

  @@unique([roleId, guildMemberId])
}

model guildLevel {
  id          Int      @id @default(autoincrement())
  guildId     String
  userId      String
  level       Int      @default(0)
  xp          Int      @default(0)
  lastLevelUp DateTime
  rank        Int?
  bonusXP     Int      @default(0)

  guild guild @relation(fields: [guildId], references: [id])
  user  user  @relation(fields: [userId], references: [id])

  @@unique([userId, guildId])
}

model guildSettings {
  id      Int    @id @default(autoincrement())
  guildId String @unique
  guild   guild  @relation(fields: [guildId], references: [id])

  levelUpMessage   String?
  levelUpChannelId String?

  welcomeMessage  String?
  farewordMessage String?
  defaultRoles    guildDefaultRole[]

  antiSpam    Boolean @default(false)
  maxMentions Int     @default(5)
  maxLines    Int     @default(10)

  excludedRoles    guildExcludedRole[]
  excludedChannels guildExcludedChannel[]
  bannedWords      guildBannedWord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model guildDefaultRole {
  id            Int           @id @default(autoincrement())
  roleId        String
  guildSettings guildSettings @relation(fields: [settingsId], references: [id])
  settingsId    Int

  @@unique([roleId, settingsId])
}

model guildExcludedRole {
  id            Int           @id @default(autoincrement())
  roleId        String
  guildSettings guildSettings @relation(fields: [settingsId], references: [id])
  settingsId    Int

  @@unique([roleId, settingsId])
}

model guildExcludedChannel {
  id            Int           @id @default(autoincrement())
  channelId     String
  guildSettings guildSettings @relation(fields: [settingsId], references: [id])
  settingsId    Int

  @@unique([channelId, settingsId])
}

model guildBannedWord {
  id            Int           @id @default(autoincrement())
  word          String
  guildSettings guildSettings @relation(fields: [settingsId], references: [id])
  settingsId    Int

  @@unique([word, settingsId])
}

model status {
  id   Int     @id @default(autoincrement())
  text String
  type String
  url  String?
}
